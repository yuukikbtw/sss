// üéØ Habit Tracker PWA - Service Worker
// Version 2.0 - Full offline support

const CACHE_VERSION = 'habit-tracker-v2.0.0';
const CACHE_STATIC = `${CACHE_VERSION}-static`;
const CACHE_DYNAMIC = `${CACHE_VERSION}-dynamic`;
const CACHE_API = `${CACHE_VERSION}-api`;

// –§–∞–π–ª—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
const STATIC_ASSETS = [
  '/',
  '/index.html',
  '/java.js',
  '/css.css',
  '/manifest.json',
  '/icon-192.png',
  '/icon-512.png'
];

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∞
const MAX_DYNAMIC_CACHE_SIZE = 50;
const MAX_API_CACHE_SIZE = 100;

// ============================================
// INSTALL - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏
// ============================================
self.addEventListener('install', (event) => {
  console.log('üöÄ [SW] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker...');
  
  event.waitUntil(
    caches.open(CACHE_STATIC)
      .then((cache) => {
        console.log('üì¶ [SW] –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...');
        return cache.addAll(STATIC_ASSETS);
      })
      .then(() => {
        console.log('‚úÖ [SW] –°—Ç–∞—Ç–∏–∫–∞ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞!');
        return self.skipWaiting(); // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      })
      .catch((error) => {
        console.error('‚ùå [SW] –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      })
  );
});

// ============================================
// ACTIVATE - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π
// ============================================
self.addEventListener('activate', (event) => {
  console.log('‚ö° [SW] –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker...');
  
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames
            .filter((name) => {
              // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –∫—ç—à–∞
              return name.startsWith('habit-tracker-') && 
                     name !== CACHE_STATIC && 
                     name !== CACHE_DYNAMIC &&
                     name !== CACHE_API;
            })
            .map((name) => {
              console.log('üóëÔ∏è [SW] –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', name);
              return caches.delete(name);
            })
        );
      })
      .then(() => {
        console.log('‚úÖ [SW] Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
        return self.clients.claim(); // –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
      })
  );
});

// ============================================
// FETCH - –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
// ============================================
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // API –∑–∞–ø—Ä–æ—Å—ã - Network First (—Å–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(networkFirstStrategy(request, CACHE_API, MAX_API_CACHE_SIZE));
    return;
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã - Cache First (–∫—ç—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)
  if (request.method === 'GET') {
    event.respondWith(cacheFirstStrategy(request));
    return;
  }

  // POST/PUT/DELETE - —Ç–æ–ª—å–∫–æ —Å–µ—Ç—å
  event.respondWith(fetch(request));
});

// ============================================
// –°–¢–†–ê–¢–ï–ì–ò–Ø: Cache First (–¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏)
// ============================================
async function cacheFirstStrategy(request) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫—ç—à
    const staticCache = await caches.open(CACHE_STATIC);
    let response = await staticCache.match(request);
    
    if (response) {
      console.log('üíæ [SW] –ò–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∞:', request.url);
      return response;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫—ç—à
    const dynamicCache = await caches.open(CACHE_DYNAMIC);
    response = await dynamicCache.match(request);
    
    if (response) {
      console.log('üíæ [SW] –ò–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∞:', request.url);
      return response;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
    console.log('üåê [SW] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Å–µ—Ç–∏:', request.url);
    const networkResponse = await fetch(request);
    
    // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ GET –∑–∞–ø—Ä–æ—Å—ã
    if (networkResponse.ok && request.method === 'GET') {
      const responseClone = networkResponse.clone();
      dynamicCache.put(request, responseClone);
      limitCacheSize(CACHE_DYNAMIC, MAX_DYNAMIC_CACHE_SIZE);
    }
    
    return networkResponse;
    
  } catch (error) {
    console.error('‚ùå [SW] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è HTML
    if (request.headers.get('accept').includes('text/html')) {
      return new Response(
        `<!DOCTYPE html>
        <html lang="ru">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>–û—Ñ–ª–∞–π–Ω - Habit Tracker</title>
          <style>
            body {
              margin: 0;
              padding: 0;
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
              display: flex;
              align-items: center;
              justify-content: center;
              min-height: 100vh;
              color: white;
            }
            .container {
              text-align: center;
              padding: 2rem;
            }
            h1 { font-size: 3rem; margin: 0; }
            p { font-size: 1.2rem; opacity: 0.9; }
            button {
              margin-top: 2rem;
              padding: 1rem 2rem;
              font-size: 1rem;
              background: white;
              color: #667eea;
              border: none;
              border-radius: 50px;
              cursor: pointer;
              font-weight: bold;
            }
            button:hover { transform: scale(1.05); }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>üì° –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</h1>
            <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p>
            <button onclick="location.reload()">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
          </div>
        </body>
        </html>`,
        {
          headers: { 'Content-Type': 'text/html' },
          status: 200
        }
      );
    }
    
    return new Response('Offline', { status: 503 });
  }
}

// ============================================
// –°–¢–†–ê–¢–ï–ì–ò–Ø: Network First (–¥–ª—è API)
// ============================================
async function networkFirstStrategy(request, cacheName, maxSize) {
  try {
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å–µ—Ç–∏
    console.log('üåê [SW] API –∑–∞–ø—Ä–æ—Å:', request.url);
    const networkResponse = await fetch(request);
    
    // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ GET –∑–∞–ø—Ä–æ—Å—ã
    if (networkResponse.ok && request.method === 'GET') {
      const cache = await caches.open(cacheName);
      cache.put(request, networkResponse.clone());
      limitCacheSize(cacheName, maxSize);
    }
    
    return networkResponse;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è [SW] –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –∫—ç—à:', request.url);
    
    // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞
    const cache = await caches.open(cacheName);
    const cachedResponse = await cache.match(request);
    
    if (cachedResponse) {
      console.log('üíæ [SW] –ò–∑ API –∫—ç—à–∞:', request.url);
      return cachedResponse;
    }
    
    // –ï—Å–ª–∏ –∏ –∫—ç—à–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    return new Response(
      JSON.stringify({ error: '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' }),
      {
        headers: { 'Content-Type': 'application/json' },
        status: 503
      }
    );
  }
}

// ============================================
// –£–¢–ò–õ–ò–¢–´: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
// ============================================
async function limitCacheSize(cacheName, maxSize) {
  const cache = await caches.open(cacheName);
  const keys = await cache.keys();
  
  if (keys.length > maxSize) {
    console.log(`üóëÔ∏è [SW] –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ ${cacheName}: ${keys.length}/${maxSize}`);
    await cache.delete(keys[0]);
    limitCacheSize(cacheName, maxSize);
  }
}

// ============================================
// BACKGROUND SYNC - –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏–π
// ============================================
self.addEventListener('sync', (event) => {
  console.log('üîÑ [SW] Background Sync:', event.tag);
  
  if (event.tag === 'sync-habits') {
    event.waitUntil(syncHabits());
  }
});

async function syncHabits() {
  try {
    console.log('üîÑ [SW] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤—ã—á–µ–∫...');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≤ IndexedDB –∏–∑–º–µ–Ω–µ–Ω–∏—è
  } catch (error) {
    console.error('‚ùå [SW] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
  }
}

// ============================================
// PUSH NOTIFICATIONS - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
// ============================================
self.addEventListener('push', (event) => {
  console.log('üì¨ [SW] Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
  
  const data = event.data ? event.data.json() : {};
  const title = data.title || 'Habit Tracker';
  const options = {
    body: data.body || '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É!',
    icon: '/icon-192.png',
    badge: '/icon-96.png',
    vibrate: [200, 100, 200],
    tag: 'habit-reminder',
    requireInteraction: false,
    actions: [
      { action: 'complete', title: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' },
      { action: 'later', title: '‚è∞ –ü–æ–∑–∂–µ' }
    ]
  };
  
  event.waitUntil(
    self.registration.showNotification(title, options)
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  console.log('üîî [SW] –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é:', event.action);
  
  event.notification.close();
  
  if (event.action === 'complete') {
    // –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
    event.waitUntil(
      clients.openWindow('/?action=complete')
    );
  } else if (event.action === 'later') {
    // –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    console.log('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ');
  } else {
    // –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});

// ============================================
// –°–û–û–ë–©–ï–ù–ò–Ø –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
// ============================================
self.addEventListener('message', (event) => {
  console.log('üí¨ [SW] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', event.data);
  
  if (event.data.action === 'skipWaiting') {
    self.skipWaiting();
  }
  
  if (event.data.action === 'clearCache') {
    event.waitUntil(
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((name) => caches.delete(name))
        );
      })
    );
  }
});

console.log('‚úÖ [SW] Service Worker –∑–∞–≥—Ä—É–∂–µ–Ω!');